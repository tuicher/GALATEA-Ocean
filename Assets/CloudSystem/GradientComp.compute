#pragma kernel CSMain
#include "SimplexNoise.compute"

#define TILE = 0

struct NoiseSettings {
    int seed;
    int numLayers;
    float noiseScale;
    float lacunarity;
    float persistence;
    float2 offset;//
};

StructuredBuffer<NoiseSettings> noiseSettings;
StructuredBuffer<float4> offsets;

static const int numThreads = 16;
static const int minMaxAccuracy = 10000;
uint resolution;
RWTexture2D<float4> Result;

static const float pi = 3.14159265359;
static const float radius = 1 / (2 * pi);

RWStructuredBuffer<int> minMaxBuffer;
float2 minMax;
float4 params;

[numthreads(numThreads,numThreads,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    NoiseSettings settings = noiseSettings[0];

    float amplitude = 1;
    float frequency = settings.noiseScale;

    float mapValue = 0;

    float2 pos = float2(id.x,id.y) / resolution;
    
    for (int layer = 0; layer < settings.numLayers; layer++) {
        float noise = snoise((pos+settings.offset/100) * frequency + offsets[layer].xy )*.5+.5;
        mapValue += noise * amplitude;
        amplitude *= settings.persistence;
        frequency *= settings.lacunarity;
    }

    mapValue/=settings.numLayers;
    

    InterlockedMin(minMaxBuffer[0], (int)(mapValue*minMaxAccuracy));
    InterlockedMax(minMaxBuffer[1], (int)(mapValue*minMaxAccuracy));

    Result[id.xy] = pow(saturate(((mapValue-minMax.x)/(minMax.y-minMax.x)-params.x)*params.y), params.z);

}